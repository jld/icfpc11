TODO, Sunday Morning:
  Fix flailing
    Instead of skipping depleted sources, assign a penalty
    Require sources' juiciness
      juicer is to flag it for the attention of the healer
  Consider quick dec (OSG_D) for followup
    ...if value is higher than n and it's still at 1.
    but if they try a large heal elsewhere, then they win
      maybe that buys time?
    Plain kill is only worth it if >=4, since if they rez once they'll rez again
    Sadly, DSZskSskGskSOx = 14; S/DSZskGskSOx = 12; OSGSDOSGSZ = 10 but racier
      And I can't move to #0 to play the counting game.

####

fancybomb:
  bomb: poly artifact that picks type and creates bomb
  targeter: dep bomb, choose target, dyn dep src0 (target -> src juice?)
  bomber: dep targeter, fire
  So... bomber deletes target goal?  Implicitly resets bomb art.
  Need a way to time-delay to let healing run.
    And need to put it in the right place -- attach to bomb, I guess
  In parallel, healing:
    polyarts for help, restore, big, lit; dep none
    restorer/helper seems to dynamically bind big/lit, but obv. rest->help
    src,targ are temp polyarts, like goalburn g0
    unsure how best to do slot 3 overloading; punt and put helpr in 8
    if the best target is dead, need help from its liveness
  Also:
    target selection -- maybe just start with move count
   

####

Goals:
  Stuff you can do, with dependencies.
  e.g., I can fire this bomb if 1) it's built, 2) the target is in, 
    and 3) the sources are able to pay.
  or, I can play the next step of this ritual if 1) the slot is live,
    and some dependencies are built/live.
  dependencies need to be explicit to allow doing closure
  So, a goal has:
    is-done, dep-list, start-of-turn check, priority, ???
    so maybe a goal->bool that can mutate the dep list &c
      *** called only if all deps are good.
    and a goal->play if it's selected
  Building a term:
    requires the term to be live
    If we're starting, the term must be I; else put
    If we're not starting, the term must not be I; else restart
    send and take the cdr and we're not starting
  Complex building:
    Depends on some subterms existing while it's doing its thing.
    But once it's done, depends only on its own liveness.
  So...
    firing the bomb depends on building the bomb and the target addr
    poking the target addr (and choosing it) can depend on the bomb
  The liveness goal is responsible for building a revive
    which means there needs to be a map of available slots          
    Also means that this is where fancy tactics would go
      parameterize?
  There'd also be a minimum life requirement goal
  The revival goal depends on the liveness of its temp node
    So if that dies, then spin off another goal to revive *that*,
      and if we keep dying then we were probably dead anyway.
  So, temporary goals... remove by memq, I guess.

Goals, continued:
  A goal is blocked if it has any nonfinished deps, ready otherwise.
  A ready goal is finished if it says so, runnable otherwise.
  So, zap everything to blocked, and repeat until fixpoint
    Everything with no unfinished deps becomes ready.
    Everything ready is sorted into runnable or finished
      ...or can it say "no, wait, I need this other work"
  So, your liveness goal notices the thing is dead, 
   & says it's not finished anymore.
    When does it allocate its space and create its subgoal?
      Immediately: maybe won't run for a while
      Later: ???

Building/Performing:
  Mono: if at [], free loc and remove
  Continuous/Poly: if at [], restart if I else done
    So, if the end result is I, repeat; else guard against zombies
  may want to change sequence on restart

Liveness:
  need recovery; given s i, return help list
  (where const [] means "I give up; we're hosed.")
  

###

TODO:
  make fancybomb
    add zombies to everything
    "bombed" by actual vitality
       bonus: single-source bombs, or abstract them
         recall that we get succ and dbl for free
    "depleted" by actual vitality + lock (for planned payments)
    help targets in order

###

Metagaming.

Suppose you have a dead cell; addrstring N, attacker with it in #0.

Atk: Z(GO)x = 4
Def: R(NO) = 2+n      (def win if n <= 2)
Atk: (SDZ)(GO)x = 8
Def: R(O),I(NO) = 4+2n (def win if n <= 2)
Atk: (S(SDD)Z)(GO)x = 10
Def: R(NO),I(NO),I(NO) = 6+3n (def win if n <= 1)
Def: (S(SRI)I)(NO) = 6+3n (ditto)
Atk: (S(S(SDD)D)Z)(GO)x = 12
Def: (S(S(SRI)I)I)(NO) = 8+3n (def win if n <= 1)
etc.

So...
Def: ONNRONNINNI
Atk: DSDSZKSGOx   <- 10
         ^   ^^
             DZ
Def: ONNRONN..R   <- oops

Def: RSISIKSNKSNO



###

Stuff to do with simulator to simplebomb:
  use actual vitalities for "depleted" and "bombed"
    sort help targets by lowness?
  better targeting:
    when evaluation does a get, add that term's score to the current one
    then bound the term above by its discernable complexity
      length (incant (discern blah))
    and use that
  recover from simple kills with a revive
  counter-revive: dec attack
  counter-dec: follow revive with fast help
    but see also the metagaming section, above
  counter-revive: send zombies
    what's the cheapest zombie to add to a bomb?
    if the opponent has revive, then a non-zom kill is a waste
      and will probably get us dead, because they can continue
       and we blew our rush
    but if they don't, then a zombomb is extra turns
  counter-zombie: pay attention and rebuild
    ugh


###
Old notes:

Dynamic register allocation may be important.
  e.g., the cost of copying stuff to/from small numbers may be worth it
  Consider that a rectified literal costs 3n, but a copy costs n
    And literals can't always be eliminated
However, fast recursion requires hard-coding an index
  (so, uh, whatever happened with that?)
